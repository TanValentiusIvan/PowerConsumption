breaks = c(-Inf, zone1_q1, zone1_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone2 <- cut(data$PowerConsumption_Zone2,
breaks = c(-Inf, zone2_q1, zone2_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone3 <- cut(data$PowerConsumption_Zone3,
breaks = c(-Inf, zone3_q1, zone3_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
# Categorize Temperature, Humidity, and Wind Speed
temp_q1 <- unname(quantile(data$Temperature, probs = c(0.25)))
temp_q2 <- unname(quantile(data$Temperature, probs = c(0.75)))
data$TempCategory <- cut(data$Temperature,
breaks = c(-Inf, temp_q1, temp_q2, Inf),
labels = c("Temp_Low", "Temp_Medium", "Temp_High"))
humid_q1 <- unname(quantile(data$Humidity, probs = c(0.25)))
humid_q2 <- unname(quantile(data$Humidity, probs = c(0.75)))
data$HumidCategory <- cut(data$Humidity,
breaks = c(-Inf, humid_q1, humid_q2, Inf),
labels = c("Humid_Low", "Humid_Medium", "Humid_High"))
wind_q1 <- unname(quantile(data$WindSpeed, probs = c(0.25)))
wind_q2 <- unname(quantile(data$WindSpeed, probs = c(0.75)))
data$WindCategory <- cut(data$WindSpeed,
breaks = c(-Inf, wind_q1, wind_q2, Inf),
labels = c("Wind_Low", "Wind_Medium", "Wind_High"))
################################################################################
# Association Rules Mining
#install.packages("arules")
library(arules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone3")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.7),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.05,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.7)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.6, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone1")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.08, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone1", parallel=FALSE)
# FP Growth
library("rCBA")
rules = rCBA::fpgrowth(txns, support=0.08, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone1", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
rules = rCBA::fpgrowth(txns, support=0.07, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone1", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
rules = rCBA::fpgrowth(txns, support=0.08, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone1", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
library(lubridate)
data$Datetime <- mdy_hm(data$Datetime)
data <- read.csv('power-consumption.csv')
# Format date
#install.packages("lubridate")
library(lubridate)
data$Datetime <- mdy_hm(data$Datetime)
data$Date <- as.Date(data$Datetime)
data$Time <- format(data$Datetime, "%H:%M:%S")
data$Month <- month(data$Datetime)
# Categorize Time of Day and Season
data$TimeOfDay <- cut(as.numeric(format(data$Datetime, "%H")),
breaks = c(-Inf, 1, 12, 18, 24),
labels = c("Night", "Morning", "Afternoon", "Evening"),
right = FALSE)
data$Season <- cut(data$Month,
breaks = c(1, 3, 6, 10, 12, Inf),
labels = c("Winter", "Spring", "Summer", "Autumn", "Winter"),
right = FALSE)
# Categorize Power Consumption
zone1_q1 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.25)))
zone1_q2 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.75)))
zone2_q1 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.25)))
zone2_q2 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.75)))
zone3_q1 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.25)))
zone3_q2 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.75)))
data$PowerCategory_Zone1 <- cut(data$PowerConsumption_Zone1,
breaks = c(-Inf, zone1_q1, zone1_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone2 <- cut(data$PowerConsumption_Zone2,
breaks = c(-Inf, zone2_q1, zone2_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone3 <- cut(data$PowerConsumption_Zone3,
breaks = c(-Inf, zone3_q1, zone3_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
# Categorize Temperature, Humidity, and Wind Speed
temp_q1 <- unname(quantile(data$Temperature, probs = c(0.25)))
temp_q2 <- unname(quantile(data$Temperature, probs = c(0.75)))
data$TempCategory <- cut(data$Temperature,
breaks = c(-Inf, temp_q1, temp_q2, Inf),
labels = c("Temp_Low", "Temp_Medium", "Temp_High"))
humid_q1 <- unname(quantile(data$Humidity, probs = c(0.25)))
humid_q2 <- unname(quantile(data$Humidity, probs = c(0.75)))
data$HumidCategory <- cut(data$Humidity,
breaks = c(-Inf, humid_q1, humid_q2, Inf),
labels = c("Humid_Low", "Humid_Medium", "Humid_High"))
wind_q1 <- unname(quantile(data$WindSpeed, probs = c(0.25)))
wind_q2 <- unname(quantile(data$WindSpeed, probs = c(0.75)))
data$WindCategory <- cut(data$WindSpeed,
breaks = c(-Inf, wind_q1, wind_q2, Inf),
labels = c("Wind_Low", "Wind_Medium", "Wind_High"))
################################################################################
# Association Rules Mining
#install.packages("arules")
library(arules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.7),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.05,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.7)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
data <- read.csv('power-consumption.csv')
# Format date
#install.packages("lubridate")
library(lubridate)
data$Datetime <- mdy_hm(data$Datetime)
data$Date <- as.Date(data$Datetime)
data$Time <- format(data$Datetime, "%H:%M:%S")
data$Month <- month(data$Datetime)
# Categorize Time of Day and Season
data$TimeOfDay <- cut(as.numeric(format(data$Datetime, "%H")),
breaks = c(-Inf, 1, 12, 18, 24),
labels = c("Night", "Morning", "Afternoon", "Evening"),
right = FALSE)
data$Season <- cut(data$Month,
breaks = c(1, 3, 6, 10, 12, Inf),
labels = c("Winter", "Spring", "Summer", "Autumn", "Winter"),
right = FALSE)
# Categorize Power Consumption
zone1_q1 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.25)))
zone1_q2 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.75)))
zone2_q1 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.25)))
zone2_q2 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.75)))
zone3_q1 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.25)))
zone3_q2 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.75)))
data$PowerCategory_Zone1 <- cut(data$PowerConsumption_Zone1,
breaks = c(-Inf, zone1_q1, zone1_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone2 <- cut(data$PowerConsumption_Zone2,
breaks = c(-Inf, zone2_q1, zone2_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone3 <- cut(data$PowerConsumption_Zone3,
breaks = c(-Inf, zone3_q1, zone3_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
# Categorize Temperature, Humidity, and Wind Speed
temp_q1 <- unname(quantile(data$Temperature, probs = c(0.25)))
temp_q2 <- unname(quantile(data$Temperature, probs = c(0.75)))
data$TempCategory <- cut(data$Temperature,
breaks = c(-Inf, temp_q1, temp_q2, Inf),
labels = c("Temp_Low", "Temp_Medium", "Temp_High"))
humid_q1 <- unname(quantile(data$Humidity, probs = c(0.25)))
humid_q2 <- unname(quantile(data$Humidity, probs = c(0.75)))
data$HumidCategory <- cut(data$Humidity,
breaks = c(-Inf, humid_q1, humid_q2, Inf),
labels = c("Humid_Low", "Humid_Medium", "Humid_High"))
wind_q1 <- unname(quantile(data$WindSpeed, probs = c(0.25)))
wind_q2 <- unname(quantile(data$WindSpeed, probs = c(0.75)))
data$WindCategory <- cut(data$WindSpeed,
breaks = c(-Inf, wind_q1, wind_q2, Inf),
labels = c("Wind_Low", "Wind_Medium", "Wind_High"))
################################################################################
# Association Rules Mining
#install.packages("arules")
library(arules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone1")]
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone1", parallel=FALSE)
data <- read.csv('power-consumption.csv')
# Format date
#install.packages("lubridate")
library(lubridate)
data$Datetime <- mdy_hm(data$Datetime)
data$Date <- as.Date(data$Datetime)
data$Time <- format(data$Datetime, "%H:%M:%S")
data$Month <- month(data$Datetime)
# Categorize Time of Day and Season
data$TimeOfDay <- cut(as.numeric(format(data$Datetime, "%H")),
breaks = c(-Inf, 1, 12, 18, 24),
labels = c("Night", "Morning", "Afternoon", "Evening"),
right = FALSE)
data$Season <- cut(data$Month,
breaks = c(1, 3, 6, 10, 12, Inf),
labels = c("Winter", "Spring", "Summer", "Autumn", "Winter"),
right = FALSE)
# Categorize Power Consumption
zone1_q1 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.25)))
zone1_q2 <- unname(quantile(data$PowerConsumption_Zone1, probs = c(0.75)))
zone2_q1 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.25)))
zone2_q2 <- unname(quantile(data$PowerConsumption_Zone2, probs = c(0.75)))
zone3_q1 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.25)))
zone3_q2 <- unname(quantile(data$PowerConsumption_Zone3, probs = c(0.75)))
data$PowerCategory_Zone1 <- cut(data$PowerConsumption_Zone1,
breaks = c(-Inf, zone1_q1, zone1_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone2 <- cut(data$PowerConsumption_Zone2,
breaks = c(-Inf, zone2_q1, zone2_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
data$PowerCategory_Zone3 <- cut(data$PowerConsumption_Zone3,
breaks = c(-Inf, zone3_q1, zone3_q2, Inf),
labels = c("Low_Con", "Medium_Con", "High_Con"))
# Categorize Temperature, Humidity, and Wind Speed
temp_q1 <- unname(quantile(data$Temperature, probs = c(0.25)))
temp_q2 <- unname(quantile(data$Temperature, probs = c(0.75)))
data$TempCategory <- cut(data$Temperature,
breaks = c(-Inf, temp_q1, temp_q2, Inf),
labels = c("Temp_Low", "Temp_Medium", "Temp_High"))
humid_q1 <- unname(quantile(data$Humidity, probs = c(0.25)))
humid_q2 <- unname(quantile(data$Humidity, probs = c(0.75)))
data$HumidCategory <- cut(data$Humidity,
breaks = c(-Inf, humid_q1, humid_q2, Inf),
labels = c("Humid_Low", "Humid_Medium", "Humid_High"))
wind_q1 <- unname(quantile(data$WindSpeed, probs = c(0.25)))
wind_q2 <- unname(quantile(data$WindSpeed, probs = c(0.75)))
data$WindCategory <- cut(data$WindSpeed,
breaks = c(-Inf, wind_q1, wind_q2, Inf),
labels = c("Wind_Low", "Wind_Medium", "Wind_High"))
################################################################################
# Association Rules Mining
#install.packages("arules")
library(arules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone3")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.7),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.05,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.7)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.7),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.05,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.7)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
View(transactions)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone3")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.7),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.05,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.7)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.7, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
rules = rCBA::fpgrowth(txns, support=0.05, confidence=0.6, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone2")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.6),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.06, conf = 0.6),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.06, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.06, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.65)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.06,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.65)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.06, confidence=0.65, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
# FP Growth
library("rCBA")
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.06, confidence=0.65, maxLength=3,
consequent="PowerCategory_Zone2", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
transaction_columns <- data[, c("TempCategory", "HumidCategory", "WindCategory",
"Season", "TimeOfDay", "PowerCategory_Zone3")]
transactions <- apply(transaction_columns, 2, function(column) {
as.character(na.omit(column))
})
transaction.list <- split(transactions, data$Datetime)
transaction.list <- as(transaction.list, "transactions")
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.05, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.06, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Apriori
rules_apriori <- apriori(transaction.list, parameter = list(supp = 0.07, conf = 0.65),
appearance = list(rhs = c("Low_Con", "Medium_Con", "High_Con"), default = "lhs"))
inspect(rules_apriori)
# Eclat
freq_eclat <- eclat(transaction.list, parameter = list(support = 0.07,
target = "frequent itemsets"))
rules_eclat <- ruleInduction(freq_eclat, transaction.list, confidence = 0.65)
rules_eclat <- subset(rules_eclat, rhs %in% c("Low_Con", "Medium_Con", "High_Con"))
inspect(rules_eclat)
train <- sapply(transaction_columns, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train, "transactions")
rules = rCBA::fpgrowth(txns, support=0.06, confidence=0.65, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
rules = rCBA::fpgrowth(txns, support=0.07, confidence=0.65, maxLength=3,
consequent="PowerCategory_Zone3", parallel=FALSE)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
inspect(prunedRules)
